// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model User {
  id               Int       @id @default(autoincrement())
  firstName        String    @db.VarChar(64)
  lastName         String    @db.VarChar(64)
  email            String    @unique @db.VarChar(64)
  username         String    @unique @db.VarChar(255)
  password         String    @db.VarChar(64)
  phoneNo          String    @db.VarChar(15)
  userType         UserType  @default(User)
  userToken        String?   @unique @db.VarChar(255)
  emailVerified    Boolean   @default(false)
  createdDate      DateTime  @default(now())
  lastModifiedDate DateTime  @updatedAt
  submittedTickets Ticket[]  @relation(name: "IssuerRelation")
  assignedTickets  Ticket[]  @relation(name: "AssigneeRelation")
  sentMsgs         Message[] @relation(name: "SenderRelation")
  receivedMsgs     Message[] @relation(name: "RecipientRelation")
  userAvatar       String?   @db.VarChar(255)
}

model Ticket {
  id               Int            @id @default(autoincrement())
  description      String         @db.Text
  title            String         @unique @db.VarChar(64)
  submittedDate    DateTime       @default(now())
  categoryId       Int            @db.Int
  category         TicketCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  department       Department     @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId     Int            @db.Int
  startDate        DateTime?
  lastModifiedDate DateTime?      @updatedAt
  endDate          DateTime?
  issuer           User           @relation(name: "IssuerRelation", fields: [issuerId], references: [id], onDelete: Cascade)
  issuerId         Int            @db.Int
  assignee         User?          @relation(name: "AssigneeRelation", fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId       Int?           @db.Int

  status   StatusTypes   @default(Pending)
  priority PriorityTypes @default(Low)
}

model Department {
  id               Int      @id @default(autoincrement())
  departmentName   String   @unique @db.VarChar(64)
  createdDate      DateTime @default(now())
  lastModifiedDate DateTime @updatedAt
  tickets          Ticket[]
}

model TicketCategory {
  id               Int       @id @default(autoincrement())
  categoryName     String    @unique @db.VarChar(64)
  createdDate      DateTime  @default(now())
  lastModifiedDate DateTime? @updatedAt
  tickets          Ticket[]
}

model Message {
  id          Int      @id @default(autoincrement())
  message     String   @db.Text
  sender      User     @relation(name: "SenderRelation", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    Int      @db.Int
  recipient   User     @relation(name: "RecipientRelation", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId Int      @db.Int
  emittedDate DateTime @default(now())
  attatchment String?  @db.VarChar(255)
}

enum StatusTypes {
  Pending
  Open
  In_Progress
  Closed
}

// enum MsgStatusTypes {
//   Read
//   Unread
// }

enum PriorityTypes {
  Critical
  Moderate
  Medium
  Low
}

enum UserType {
  User
  Employee
  Adminstrator
}
